type Account = record {
    owner : principal;
    subaccount : opt blob
};

type TransferError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    TooOld;
    CreatedInFuture : record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text }
};

type TransferFromError = variant {
    BadFee : record { expected_fee : nat };
    BadBurn : record { min_burn_amount : nat };
    InsufficientFunds : record { balance : nat };
    InsufficientAllowance : record { allowance : nat };
    TooOld;
    CreatedInFuture : record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text }
};

type ApproveError = variant {
    BadFee : record { expected_fee : nat };
    InsufficientFunds : record { balance : nat };
    AllowanceChanged : record { current_allowance : nat };
    Expired : record { ledger_time : nat64 };
    TooOld;
    CreatedInFuture : record { ledger_time : nat64 };
    Duplicate : record { duplicate_of : nat };
    TemporarilyUnavailable;
    GenericError : record { error_code : nat; message : text }
};

type Allowance = record {
    allowance : nat;
    expires_at : opt nat64
};

type UserData = record {
    user_principal : principal;
    ckbtc_balance : nat64;
    loans : nat64;
    staked : nat64;
    lent : nat64;
    farmed : nat64;
    stake_timestamp : opt nat64;
    lend_timestamp : opt nat64;
    farm_timestamp : opt nat64;
    loan_timestamp : opt nat64
};

service : {
    register_user : () -> (text);
    deposit_ckbtc : (nat64) -> (text);
    withdraw_ckbtc : (nat64) -> (text);
    borrow_ckbtc : (nat64) -> (text);
    repay_loan_ckbtc : (nat64) -> (text);
    stake_ckbtc : (nat64) -> (text);
    unstake_ckbtc : (nat64) -> (text);
    lend_ckbtc : (nat64) -> (text);
    unlend_ckbtc : (nat64) -> (text);
    yield_farm_ckbtc : (nat64) -> (text);
    unfarm_ckbtc : (nat64) -> (text);
    claim_staking_rewards : () -> (text);
    claim_lending_rewards : () -> (text);
    claim_yield_farming_rewards : () -> (text);
    pause_contract : () -> (text);
    unpause_contract : () -> (text);
    get_real_ckbtc_balance : (opt principal) -> (variant { Ok : nat64; Err : text });
    check_allowance : (principal) -> (variant { Ok : Allowance; Err : text });
    get_user_data : (principal) -> (opt UserData) query;
    get_my_data : () -> (opt UserData) query;
    get_pending_staking_rewards : (opt principal) -> (nat64) query;
    get_pending_lending_rewards : (opt principal) -> (nat64) query;
    get_pending_yield_farming_rewards : (opt principal) -> (nat64) query;
    get_loan_debt : (opt principal) -> (nat64) query;
    get_health_factor : (opt principal) -> (float64) query;
    emergency_withdraw_all : () -> (text);
    get_platform_stats : () -> (text) query;
    whoami : () -> (principal) query;
    get_contract_info : () -> (text) query;
    get_integration_guide : () -> (text) query
}
